The process of identifying and fixing bugs in my own code starts with a bug report from Chen Chongxian. This bug report is called zhengzh_bug2.txt. It states that my smithy function does not properly draw 3 cards, instead it draws 25 cards. On top of that, when it is called by cardEffects, it does not properly return 0. Following his bug report, I rewrote my cardtest1.c test file to see if it is true. It turns out that it does indeed draw 25 cards and does not return a 0 when called from cardEffect. I went back to my dominion.c code and modified a for loop and then added a return 0 after all my function calls in cardEffect. I ran my debugger again and it still failed the test for drawing cards. Then I realized that my debugger is wrong. This is because it was testing to see if the hand size if +3 bigger than what it originally was but it should be checking to see if it is +2 bigger since the card that is played is now discarded. After I changed that it seemed to fix it since my debugger now says that cardEffect returns 0 and that the draw test is also successful. The Agan's principles I used are "Getting a fresh view" since having Chongxian look at my code helped me identify that bug. Another principle is "Quit thinking and look", this applied since I did not think about why my function was not returning 0 at first. I was fairly sure of why it was not drawing 3 cards but not did even consider that it was not returning 0 when being called by cardEffect. Another Agan's principle that applies in this case is "Check the plugs". This applies since my debugger was actually wrong. Most importantly the Agan's rule of "Understand the system" applies. This is because I did not understand that cardEffect must return 0 and when I refactored I did not take that into consideration.

Below is the result of my successful test:


Test passed for drawing 3 cards
cardEffect successfully returned 0
Smithy successfully ran
