No bugs in this functionisGameOver successfully ran
hand before
1
hand before
4
hand before
4
hand before
4
hand after
1
hand after
4
hand after
4
hand after
4
hand after
21
Can properly increment deckCount and handCount, also tested that it can add the correct card to its hand. However, for some reason the initialize function starts the game with player 0 instead of player 1 which can get confusing. This is an issue with initialize howevergainCard successfully ran
0Test can end a player's turn, and loops back around when it reaches the max player, however, player number starts at player 0, ends at player 1, instead of player 1 and player 2.endTurn successfully ran
Does not correctly draw 3 cards
Great Hall is implemented incorrectly, however somewhere else in the code is making it work
error: no extra turn for user
Error incrementing coin
Error adding curse
File 'dominion.c'
Lines executed:42.88% of 562
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:106
        -:    0:Programs:40
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int playsmithy(int currentPlayer, struct gameState *state, int handPos);
        -:    9:int playsteward(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos);
        -:   10:int playvillage(int currentPlayer, struct gameState *state, int handPos);
        -:   11:int playcouncilroom(int currentPlayer, struct gameState *state, int handPos);
        -:   12:int playgreathall(int currentPlayer, struct gameState *state, int handPos);
        -:   13:
  1625190:   14:int compare(const void* a, const void* b) {
  1625190:   15:  if (*(int*)a > *(int*)b)
    88142:   16:    return 1;
  1537048:   17:  if (*(int*)a < *(int*)b)
   248271:   18:    return -1;
  1288777:   19:  return 0;
        -:   20:}
        -:   21:
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
    49195:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;			
        -:   49:  //set up random number generator
    49195:   50:  SelectStream(1);
    49195:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
    49195:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    24806:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
    24389:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
   268279:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
  2682790:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
  2438900:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
    24389:   79:  if (numPlayers == 2)
        -:   80:    {
    12342:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
    12047:   83:  else if (numPlayers == 3)
        -:   84:    {
    12047:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
    24389:   93:  if (numPlayers == 2)
        -:   94:    {
    12342:   95:      state->supplyCount[estate] = 8;
    12342:   96:      state->supplyCount[duchy] = 8;
    12342:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
    12047:  101:      state->supplyCount[estate] = 12;
    12047:  102:      state->supplyCount[duchy] = 12;
    12047:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
    24389:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    24389:  108:  state->supplyCount[silver] = 40;
    24389:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
   512169:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  113:    {
  4024185:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  115:	{
  3780295:  116:	  if (kingdomCards[j] == i)
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
   243890:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:		{
    48786:  121:		  if (numPlayers == 2){ 
    12346:  122:		    state->supplyCount[i] = 8; 
        -:  123:		  }
    12047:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
   219497:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
   243890:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
  3536405:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
    85214:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
    60825:  146:      state->deckCount[i] = 0;
   243300:  147:      for (j = 0; j < 3; j++)
        -:  148:	{
   182475:  149:	  state->deck[i][j] = estate;
   182475:  150:	  state->deckCount[i]++;
        -:  151:	}
   486600:  152:      for (j = 3; j < 10; j++)
        -:  153:	{
   425775:  154:	  state->deck[i][j] = copper;
   425775:  155:	  state->deckCount[i]++;		
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
    85214:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
    60825:  162:      if ( shuffle(i, state) < 0 )
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
    85214:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
    60825:  172:      state->handCount[i] = 0;
    60825:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
   682892:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
   658503:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
    24389:  188:  state->outpostPlayed = 0;
    24389:  189:  state->phase = 0;
    24389:  190:  state->numActions = 1;
    24389:  191:  state->numBuys = 1;
    24389:  192:  state->playedCardCount = 0;
    24389:  193:  state->whoseTurn = 0;
    24389:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
   146334:  198:  for (it = 0; it < 5; it++){
   121945:  199:    drawCard(state->whoseTurn, state);
        -:  200:  }
        -:  201:
    24389:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
    24389:  204:  return 0;
        -:  205:}
        -:  206:
    68504:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
    68504:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
    68504:  215:  if (state->deckCount[player] < 1)
     7117:  216:    return -1;
    61387:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
   886125:  220:  while (state->deckCount[player] > 0) {
   763351:  221:    card = floor(Random() * state->deckCount[player]);
   763351:  222:    newDeck[newDeckPos] = state->deck[player][card];
   763351:  223:    newDeckPos++;
 16542607:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
 15779256:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
   763351:  227:    state->deckCount[player]--;
        -:  228:  }
   820717:  229:  for (i = 0; i < newDeckPos; i++) {
   759330:  230:    state->deck[player][i] = newDeck[i];
   759330:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
    61387:  234:  return 0;
        -:  235:}
        -:  236:
    47782:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{	
        -:  239:  int card;
    47782:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    47782:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //check if player has enough actions
    47782:  249:  if ( state->numActions < 1 )
        -:  250:    {
    18858:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //get card played
    28924:  255:  card = handCard(handPos, state);
        -:  256:	
        -:  257:  //check if selected card is an action
    28924:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
     2751:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //play card
    26173:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
     8823:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //reduce number of actions
    17350:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    17350:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:	
    17350:  275:  return 0;
        -:  276:}
        -:  277:
        4:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
        4:  286:  who = state->whoseTurn;
        -:  287:
        4:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
        4:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
        4:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        4:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
        -:  315:}
        -:  316:
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
    28924:  321:int handCard(int handPos, struct gameState *state) {
    28924:  322:  int currentPlayer = whoseTurn(state);
    28924:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
       12:  326:int supplyCount(int card, struct gameState *state) {
       12:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
        -:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
    57113:  352:int whoseTurn(struct gameState *state) {
    57113:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
       16:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
       16:  359:  int currentPlayer = whoseTurn(state);
        -:  360:  
        -:  361:  //Discard hand
       88:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       72:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       72:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
       16:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:    
        -:  368:  //Code for determining the player
       16:  369:  if (currentPlayer < (state->numPlayers - 1)){ 
       12:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
        4:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
       16:  376:  state->outpostPlayed = 0;
       16:  377:  state->phase = 0;
       16:  378:  state->numActions = 1;
       16:  379:  state->coins = 0;
       16:  380:  state->numBuys = 1;
       16:  381:  state->playedCardCount = 0;
       16:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
       96:  386:  for (k = 0; k < 5; k++){
       80:  387:    drawCard(state->whoseTurn, state);//Draw a card
        -:  388:  }
        -:  389:
        -:  390:  //Update money
       16:  391:  updateCoins(state->whoseTurn, state , 0);
        -:  392:
       16:  393:  return 0;
        -:  394:}
        -:  395:
       12:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:	
        -:  400:  //if stack of Province cards is empty, the game ends
       12:  401:  if (state->supplyCount[province] == 0)
        -:  402:    {
        4:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
        8:  407:  j = 0;
      208:  408:  for (i = 0; i < 25; i++)
        -:  409:    {
      200:  410:      if (state->supplyCount[i] == 0)
        -:  411:	{
       12:  412:	  j++;
        -:  413:	}
        -:  414:    }
        8:  415:  if ( j >= 3)
        -:  416:    {
        4:  417:      return 1;
        -:  418:    }
        -:  419:
        4:  420:  return 0;
        -:  421:}
        -:  422:
    #####:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
    #####:  426:  int score = 0;
        -:  427:  //score from hand
    #####:  428:  for (i = 0; i < state->handCount[player]; i++)
        -:  429:    {
    #####:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  433:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
    #####:  439:  for (i = 0; i < state->discardCount[player]; i++)
        -:  440:    {
    #####:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  444:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
    #####:  450:  for (i = 0; i < state->discardCount[player]; i++)
        -:  451:    {
    #####:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  455:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  458:    }
        -:  459:
    #####:  460:  return score;
        -:  461:}
        -:  462:
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;	
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
  4898117:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
  4898117:  534:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  535:    
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
   159173:  539:    for (i = 0; i < state->discardCount[player];i++){
   155101:  540:      state->deck[player][i] = state->discard[player][i];
   155101:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
     4072:  544:    state->deckCount[player] = state->discardCount[player];
     4072:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
     4072:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  549:   
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:    
     4072:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
     4072:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:    
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:    
     4072:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
     4072:  565:    if (deckCounter == 0)
     3510:  566:      return -1;
        -:  567:
      562:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      562:  569:    state->deckCount[player]--;
      562:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
  4894045:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
  4894045:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
  4894045:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  4894045:  582:    state->deckCount[player]--;
  4894045:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
  4894607:  586:  return 0;
        -:  587:}
        -:  588:
        4:  589:int getCost(int cardNumber)
        -:  590:{
        4:  591:  switch( cardNumber ) 
        -:  592:    {
        -:  593:    case curse:
    #####:  594:      return 0;
        -:  595:    case estate:
    #####:  596:      return 2;
        -:  597:    case duchy:
    #####:  598:      return 5;
        -:  599:    case province:
    #####:  600:      return 8;
        -:  601:    case copper:
    #####:  602:      return 0;
        -:  603:    case silver:
    #####:  604:      return 3;
        -:  605:    case gold:
    #####:  606:      return 6;
        -:  607:    case adventurer:
        4:  608:      return 6;
        -:  609:    case council_room:
    #####:  610:      return 5;
        -:  611:    case feast:
    #####:  612:      return 4;
        -:  613:    case gardens:
    #####:  614:      return 4;
        -:  615:    case mine:
    #####:  616:      return 5;
        -:  617:    case remodel:
    #####:  618:      return 4;
        -:  619:    case smithy:
    #####:  620:      return 4;
        -:  621:    case village:
    #####:  622:      return 3;
        -:  623:    case baron:
    #####:  624:      return 4;
        -:  625:    case great_hall:
    #####:  626:      return 3;
        -:  627:    case minion:
    #####:  628:      return 5;
        -:  629:    case steward:
    #####:  630:      return 3;
        -:  631:    case tribute:
    #####:  632:      return 5;
        -:  633:    case ambassador:
    #####:  634:      return 3;
        -:  635:    case cutpurse:
    #####:  636:      return 4;
        -:  637:    case embargo: 
    #####:  638:      return 2;
        -:  639:    case outpost:
    #####:  640:      return 5;
        -:  641:    case salvager:
    #####:  642:      return 4;
        -:  643:    case sea_hag:
    #####:  644:      return 4;
        -:  645:    case treasure_map:
    #####:  646:      return 4;
        -:  647:    }
        -:  648:	
    #####:  649:  return -1;
        -:  650:}
        -:  651:
     8003:  652:int playsmithy(int currentPlayer, struct gameState *state, int handPos){
        -:  653:
        -:  654:
        -:  655:      //+3 Cards
        -:  656:      int i;
   208078:  657:      for (i = 0; i < 25; i++)
        -:  658:	{
   200075:  659:	  drawCard(currentPlayer, state);
        -:  660:	}
        -:  661:			
        -:  662:      //discard card from hand
     8003:  663:      discardCard(handPos, currentPlayer, state, 0);
     8003:  664:      return 0;
        -:  665:
        -:  666:}
        -:  667:
    #####:  668:int playsteward(int currentPlayer, struct gameState *state, int choice1, int choice2, int choice3, int handPos){
        -:  669:	
        -:  670:	 
    #####:  671:      if (choice1 == 1)
        -:  672:	{
        -:  673:	  //+2 cards
    #####:  674:	  drawCard(currentPlayer, state);
    #####:  675:	  drawCard(currentPlayer, state);
        -:  676:	}
    #####:  677:      else if (choice1 == 2)
        -:  678:	{
        -:  679:	  //+2 coins
    #####:  680:	  state->coins = state->coins + 30;
        -:  681:	}
        -:  682:      else
        -:  683:	{
        -:  684:	  //trash 2 cards in hand
    #####:  685:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  686:	  discardCard(choice3, currentPlayer, state, 1);
        -:  687:	}
        -:  688:			
        -:  689:      //discard card from hand
    #####:  690:      discardCard(handPos, currentPlayer, state, 0);
    #####:  691:      return 0;
        -:  692:
        -:  693:          
        -:  694:
        -:  695:}
        -:  696:
    #####:  697:int playvillage(int currentPlayer, struct gameState *state, int handPos){
        -:  698:
        -:  699:	
        -:  700:      //+1 Card
    #####:  701:      drawCard(currentPlayer, state);
        -:  702:			
        -:  703:      //+2 Actions
    #####:  704:      state->numActions = state->numActions + 2;
        -:  705:			
        -:  706:      //discard played card from hand
    #####:  707:      discardCard(handPos, currentPlayer, state, 0);
    #####:  708:      return 0;
        -:  709:
        -:  710:}
        -:  711:
    #####:  712:int playcouncilroom(int currentPlayer, struct gameState *state, int handPos){
        -:  713:
        -:  714:	int i;	
        -:  715:      //+4 Cards
    #####:  716:      for (i = 0; i < 4; i++)
        -:  717:	{
    #####:  718:	  drawCard(currentPlayer, state);
        -:  719:	}
        -:  720:			
        -:  721:      //+1 Buy
    #####:  722:      state->numBuys++;
        -:  723:			
        -:  724:      //Each other player draws a card
    #####:  725:      for (i = 0; i < state->numPlayers; i++)
        -:  726:	{
    #####:  727:	  if ( i != currentPlayer )
        -:  728:	    {
    #####:  729:	      drawCard(i, state);
        -:  730:	    }
        -:  731:	}
        -:  732:			
        -:  733:      //put played card in played card pile
    #####:  734:      discardCard(handPos, currentPlayer, state, 0);
        -:  735:			
    #####:  736:      return 0;
        -:  737:
        -:  738:}
        -:  739:
      820:  740:int playgreathall(int currentPlayer, struct gameState *state, int handPos){
        -:  741:
        -:  742:	
        -:  743:      //+1 Card
      820:  744:      drawCard(currentPlayer, state);
        -:  745:			
        -:  746:      //+1 Actions
        -:  747:      //state->numActions++;
        -:  748:			
        -:  749:      //discard card from hand
      820:  750:      discardCard(handPos, currentPlayer, state, 0);
      820:  751:      return 0;
        -:  752:
        -:  753:}
        -:  754:
        -:  755:
        -:  756:
    28173:  757:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  758:{
        -:  759:  int i;
        -:  760:  int j;
        -:  761:  int k;
        -:  762:  int x;
        -:  763:  int index;
    28173:  764:  int currentPlayer = whoseTurn(state);
    28173:  765:  int nextPlayer = currentPlayer + 1;
        -:  766:
    28173:  767:  int tributeRevealedCards[2] = {-1, -1};
        -:  768:  int temphand[MAX_HAND];// moved above the if statement
    28173:  769:  int drawntreasure=0;
        -:  770:  int cardDrawn;
    28173:  771:  int z = 0;// this is the counter for the temp hand
    28173:  772:  if (nextPlayer > (state->numPlayers - 1)){
        3:  773:    nextPlayer = 0;
        -:  774:  }
        -:  775:  
    28173:  776: if (card == smithy){
        -:  777:
     8003:  778:	playsmithy(currentPlayer, state, handPos);
        -:  779:
        -:  780: }
    20170:  781: else if (card == steward){
        -:  782:	
    #####:  783:	playsteward(currentPlayer, state, choice1, choice2, choice3, handPos);
        -:  784:
        -:  785: }
    20170:  786: else if (card == village){
        -:  787:
    #####:  788:	playvillage(currentPlayer, state, handPos);
        -:  789: }
    20170:  790: else if(card == council_room){
        -:  791:
    #####:  792:	playcouncilroom(currentPlayer, state, handPos);
        -:  793:
        -:  794: }
    20170:  795: else if(card == great_hall){
        -:  796:	
      820:  797:	playgreathall(currentPlayer, state, handPos);
        -:  798:
        -:  799:}
        -:  800:	
        -:  801:  //uses switch to select card and perform actions
    28173:  802:  switch( card ) 
        -:  803:    {
        -:  804:    case adventurer:
  4613881:  805:      while(drawntreasure<2){
  4575197:  806:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     3607:  807:	  shuffle(currentPlayer, state);
        -:  808:	}
  4575197:  809:	drawCard(currentPlayer, state);
  4575197:  810:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  4575197:  811:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    38684:  812:	  drawntreasure++;
        -:  813:	else{
  4536513:  814:	  temphand[z]=cardDrawn;
  4536513:  815:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  4536513:  816:	  z++;
        -:  817:	}
        -:  818:      }
  4566071:  819:      while(z-1>=0){
  4527387:  820:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  4527387:  821:	z=z-1;
        -:  822:      }
    19342:  823:      return 0;
        -:  824:			
        -:  825:   /* case council_room:
        -:  826:      //+4 Cards
        -:  827:      for (i = 0; i < 4; i++)
        -:  828:	{
        -:  829:	  drawCard(currentPlayer, state);
        -:  830:	}
        -:  831:			
        -:  832:      //+1 Buy
        -:  833:      state->numBuys++;
        -:  834:			
        -:  835:      //Each other player draws a card
        -:  836:      for (i = 0; i < state->numPlayers; i++)
        -:  837:	{
        -:  838:	  if ( i != currentPlayer )
        -:  839:	    {
        -:  840:	      drawCard(i, state);
        -:  841:	    }
        -:  842:	}
        -:  843:			
        -:  844:      //put played card in played card pile
        -:  845:      discardCard(handPos, currentPlayer, state, 0);
        -:  846:			
        -:  847:      return 0;
        -:  848:*/			
        -:  849:    case feast:
        -:  850:      //gain card with cost up to 5
        -:  851:      //Backup hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  854:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  855:      }
        -:  856:      //Backup hand
        -:  857:
        -:  858:      //Update Coins for Buy
    #####:  859:      updateCoins(currentPlayer, state, 5);
    #####:  860:      x = 1;//Condition to loop on
    #####:  861:      while( x == 1) {//Buy one card
    #####:  862:	if (supplyCount(choice1, state) <= 0){
        -:  863:	  if (DEBUG)
        -:  864:	    printf("None of that card left, sorry!\n");
        -:  865:
        -:  866:	  if (DEBUG){
        -:  867:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  868:	  }
        -:  869:	}
    #####:  870:	else if (state->coins < getCost(choice1)){
    #####:  871:	  printf("That card is too expensive!\n");
        -:  872:
        -:  873:	  if (DEBUG){
        -:  874:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  875:	  }
        -:  876:	}
        -:  877:	else{
        -:  878:
        -:  879:	  if (DEBUG){
        -:  880:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  881:	  }
        -:  882:
    #####:  883:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  884:	  x = 0;//No more buying cards
        -:  885:
        -:  886:	  if (DEBUG){
        -:  887:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  888:	  }
        -:  889:
        -:  890:	}
        -:  891:      }     
        -:  892:
        -:  893:      //Reset Hand
    #####:  894:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  895:	state->hand[currentPlayer][i] = temphand[i];
    #####:  896:	temphand[i] = -1;
        -:  897:      }
        -:  898:      //Reset Hand
        -:  899:      			
    #####:  900:      return 0;
        -:  901:			
        -:  902:    case gardens:
    #####:  903:      return -1;
        -:  904:			
        -:  905:    case mine:
    #####:  906:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  907:
    #####:  908:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:		
    #####:  913:      if (choice2 > treasure_map || choice2 < curse)
        -:  914:	{
    #####:  915:	  return -1;
        -:  916:	}
        -:  917:
    #####:  918:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  919:	{
    #####:  920:	  return -1;
        -:  921:	}
        -:  922:
    #####:  923:      gainCard(choice2, state, 2, currentPlayer);
        -:  924:
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
        -:  927:
        -:  928:      //discard trashed card
    #####:  929:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  930:	{
    #####:  931:	  if (state->hand[currentPlayer][i] == j)
        -:  932:	    {
    #####:  933:	      discardCard(i, currentPlayer, state, 0);			
    #####:  934:	      break;
        -:  935:	    }
        -:  936:	}
        -:  937:			
    #####:  938:      return 0;
        -:  939:			
        -:  940:    case remodel:
    #####:  941:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  942:
    #####:  943:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  944:	{
    #####:  945:	  return -1;
        -:  946:	}
        -:  947:
    #####:  948:      gainCard(choice2, state, 0, currentPlayer);
        -:  949:
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
        -:  952:
        -:  953:      //discard trashed card
    #####:  954:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  955:	{
    #####:  956:	  if (state->hand[currentPlayer][i] == j)
        -:  957:	    {
    #####:  958:	      discardCard(i, currentPlayer, state, 0);			
    #####:  959:	      break;
        -:  960:	    }
        -:  961:	}
        -:  962:
        -:  963:
    #####:  964:      return 0;
        -:  965:		
        -:  966:/*    case smithy:
        -:  967:      //+3 Cards
        -:  968:      for (i = 0; i < 3; i++)
        -:  969:	{
        -:  970:	  drawCard(currentPlayer, state);
        -:  971:	}
        -:  972:			
        -:  973:      //discard card from hand
        -:  974:      discardCard(handPos, currentPlayer, state, 0);
        -:  975:      return 0;
        -:  976:	*/	
        -:  977:/*    case village:
        -:  978:      //+1 Card
        -:  979:      drawCard(currentPlayer, state);
        -:  980:			
        -:  981:      //+2 Actions
        -:  982:      state->numActions = state->numActions + 2;
        -:  983:			
        -:  984:      //discard played card from hand
        -:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:      return 0;
        -:  987:*/		
        -:  988:    case baron:
    #####:  989:      state->numBuys++;//Increase buys by 1!
    #####:  990:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  991:	int p = 0;//Iterator for hand!
    #####:  992:	int card_not_discarded = 1;//Flag for discard set!
    #####:  993:	while(card_not_discarded){
    #####:  994:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  995:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  996:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  997:	    state->discardCount[currentPlayer]++;
    #####:  998:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  999:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1000:	    }
    #####: 1001:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1002:	    state->handCount[currentPlayer]--;
    #####: 1003:	    card_not_discarded = 0;//Exit the loop
        -: 1004:	  }
    #####: 1005:	  else if (p > state->handCount[currentPlayer]){
        -: 1006:	    if(DEBUG) {
        -: 1007:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1008:	      printf("Must gain an estate if there are any\n");
        -: 1009:	    }
    #####: 1010:	    if (supplyCount(estate, state) > 0){
    #####: 1011:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1012:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1013:	      if (supplyCount(estate, state) == 0){
    #####: 1014:		isGameOver(state);
        -: 1015:	      }
        -: 1016:	    }
    #####: 1017:	    card_not_discarded = 0;//Exit the loop
        -: 1018:	  }
        -: 1019:			    
        -: 1020:	  else{
    #####: 1021:	    p++;//Next card
        -: 1022:	  }
        -: 1023:	}
        -: 1024:      }
        -: 1025:			    
        -: 1026:      else{
    #####: 1027:	if (supplyCount(estate, state) > 0){
    #####: 1028:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1029:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1030:	  if (supplyCount(estate, state) == 0){
    #####: 1031:	    isGameOver(state);
        -: 1032:	  }
        -: 1033:	}
        -: 1034:      }
        -: 1035:	    
        -: 1036:      
    #####: 1037:      return 0;
        -: 1038:		
        -: 1039:/*    case great_hall:
        -: 1040:      //+1 Card
        -: 1041:      drawCard(currentPlayer, state);
        -: 1042:			
        -: 1043:      //+1 Actions
        -: 1044:      state->numActions++;
        -: 1045:			
        -: 1046:      //discard card from hand
        -: 1047:      discardCard(handPos, currentPlayer, state, 0);
        -: 1048:      return 0;
        -: 1049:*/		
        -: 1050:    case minion:
        -: 1051:      //+1 action
    #####: 1052:      state->numActions++;
        -: 1053:			
        -: 1054:      //discard card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
        -: 1056:			
    #####: 1057:      if (choice1)		//+2 coins
        -: 1058:	{
    #####: 1059:	  state->coins = state->coins + 2;
        -: 1060:	}
        -: 1061:			
    #####: 1062:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1063:	{
        -: 1064:	  //discard hand
    #####: 1065:	  while(numHandCards(state) > 0)
        -: 1066:	    {
    #####: 1067:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1068:	    }
        -: 1069:				
        -: 1070:	  //draw 4
    #####: 1071:	  for (i = 0; i < 4; i++)
        -: 1072:	    {
    #####: 1073:	      drawCard(currentPlayer, state);
        -: 1074:	    }
        -: 1075:				
        -: 1076:	  //other players discard hand and redraw if hand size > 4
    #####: 1077:	  for (i = 0; i < state->numPlayers; i++)
        -: 1078:	    {
    #####: 1079:	      if (i != currentPlayer)
        -: 1080:		{
    #####: 1081:		  if ( state->handCount[i] > 4 )
        -: 1082:		    {
        -: 1083:		      //discard hand
    #####: 1084:		      while( state->handCount[i] > 0 )
        -: 1085:			{
    #####: 1086:			  discardCard(handPos, i, state, 0);
        -: 1087:			}
        -: 1088:							
        -: 1089:		      //draw 4
    #####: 1090:		      for (j = 0; j < 4; j++)
        -: 1091:			{
    #####: 1092:			  drawCard(i, state);
        -: 1093:			}
        -: 1094:		    }
        -: 1095:		}
        -: 1096:	    }
        -: 1097:				
        -: 1098:	}
    #####: 1099:      return 0;
        -: 1100:		
        -: 1101:/*    case steward:
        -: 1102:      if (choice1 == 1)
        -: 1103:	{
        -: 1104:	  //+2 cards
        -: 1105:	  drawCard(currentPlayer, state);
        -: 1106:	  drawCard(currentPlayer, state);
        -: 1107:	}
        -: 1108:      else if (choice1 == 2)
        -: 1109:	{
        -: 1110:	  //+2 coins
        -: 1111:	  state->coins = state->coins + 2;
        -: 1112:	}
        -: 1113:      else
        -: 1114:	{
        -: 1115:	  //trash 2 cards in hand
        -: 1116:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1117:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1118:	}
        -: 1119:			
        -: 1120:      //discard card from hand
        -: 1121:      discardCard(handPos, currentPlayer, state, 0);
        -: 1122:      return 0;
        -: 1123:*/	
        -: 1124:    case tribute:
    #####: 1125:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1126:	if (state->deckCount[nextPlayer] > 0){
    #####: 1127:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1128:	  state->deckCount[nextPlayer]--;
        -: 1129:	}
    #####: 1130:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1131:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1132:	  state->discardCount[nextPlayer]--;
        -: 1133:	}
        -: 1134:	else{
        -: 1135:	  //No Card to Reveal
        -: 1136:	  if (DEBUG){
        -: 1137:	    printf("No cards to reveal\n");
        -: 1138:	  }
        -: 1139:	}
        -: 1140:      }
        -: 1141:	    
        -: 1142:      else{
    #####: 1143:	if (state->deckCount[nextPlayer] == 0){
    #####: 1144:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1145:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1146:	    state->deckCount[nextPlayer]++;
    #####: 1147:	    state->discard[nextPlayer][i] = -1;
    #####: 1148:	    state->discardCount[nextPlayer]--;
        -: 1149:	  }
        -: 1150:			    
    #####: 1151:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1152:	} 
    #####: 1153:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1154:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1155:	state->deckCount[nextPlayer]--;
    #####: 1156:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1157:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1158:	state->deckCount[nextPlayer]--;
        -: 1159:      }    
        -: 1160:		       
    #####: 1161:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1162:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1163:	state->playedCardCount++;
    #####: 1164:	tributeRevealedCards[1] = -1;
        -: 1165:      }
        -: 1166:
    #####: 1167:      for (i = 0; i <= 2; i ++){
    #####: 1168:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1169:	  state->coins += 2;
        -: 1170:	}
        -: 1171:		    
    #####: 1172:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1173:	  drawCard(currentPlayer, state);
    #####: 1174:	  drawCard(currentPlayer, state);
        -: 1175:	}
        -: 1176:	else{//Action Card
    #####: 1177:	  state->numActions = state->numActions + 2;
        -: 1178:	}
        -: 1179:      }
        -: 1180:	    
    #####: 1181:      return 0;
        -: 1182:		
        -: 1183:    case ambassador:
    #####: 1184:      j = 0;		//used to check if player has enough cards to discard
        -: 1185:
    #####: 1186:      if (choice2 > 2 || choice2 < 0)
        -: 1187:	{
    #####: 1188:	  return -1;				
        -: 1189:	}
        -: 1190:
    #####: 1191:      if (choice1 == handPos)
        -: 1192:	{
    #####: 1193:	  return -1;
        -: 1194:	}
        -: 1195:
    #####: 1196:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1197:	{
    #####: 1198:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1199:	    {
    #####: 1200:	      j++;
        -: 1201:	    }
        -: 1202:	}
    #####: 1203:      if (j < choice2)
        -: 1204:	{
    #####: 1205:	  return -1;				
        -: 1206:	}
        -: 1207:
        -: 1208:      if (DEBUG) 
        -: 1209:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1210:
        -: 1211:      //increase supply count for choosen card by amount being discarded
    #####: 1212:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1213:			
        -: 1214:      //each other player gains a copy of revealed card
    #####: 1215:      for (i = 0; i < state->numPlayers; i++)
        -: 1216:	{
    #####: 1217:	  if (i != currentPlayer)
        -: 1218:	    {
    #####: 1219:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1220:	    }
        -: 1221:	}
        -: 1222:
        -: 1223:      //discard played card from hand
    #####: 1224:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1225:
        -: 1226:      //trash copies of cards returned to supply
    #####: 1227:      for (j = 0; j < choice2; j++)
        -: 1228:	{
    #####: 1229:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:	    {
    #####: 1231:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1232:		{
    #####: 1233:		  discardCard(i, currentPlayer, state, 1);
    #####: 1234:		  break;
        -: 1235:		}
        -: 1236:	    }
        -: 1237:	}			
        -: 1238:
    #####: 1239:      return 0;
        -: 1240:		
        -: 1241:    case cutpurse:
        -: 1242:
    #####: 1243:      updateCoins(currentPlayer, state, 2);
    #####: 1244:      for (i = 0; i < state->numPlayers; i++)
        -: 1245:	{
    #####: 1246:	  if (i != currentPlayer)
        -: 1247:	    {
    #####: 1248:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1249:		{
    #####: 1250:		  if (state->hand[i][j] == copper)
        -: 1251:		    {
    #####: 1252:		      discardCard(j, i, state, 0);
    #####: 1253:		      break;
        -: 1254:		    }
    #####: 1255:		  if (j == state->handCount[i])
        -: 1256:		    {
    #####: 1257:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1258:			{
        -: 1259:			  if (DEBUG)
        -: 1260:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1261:			}	
    #####: 1262:		      break;
        -: 1263:		    }		
        -: 1264:		}
        -: 1265:					
        -: 1266:	    }
        -: 1267:				
        -: 1268:	}				
        -: 1269:
        -: 1270:      //discard played card from hand
    #####: 1271:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1272:
    #####: 1273:      return 0;
        -: 1274:
        -: 1275:		
        -: 1276:    case embargo: 
        -: 1277:      //+2 Coins
        4: 1278:      state->coins = state->coins + 2;
        -: 1279:			
        -: 1280:      //see if selected pile is in play
        4: 1281:      if ( state->supplyCount[choice1] == -1 )
        -: 1282:	{
    #####: 1283:	  return -1;
        -: 1284:	}
        -: 1285:			
        -: 1286:      //add embargo token to selected supply pile
        4: 1287:      state->embargoTokens[choice1]++;
        -: 1288:			
        -: 1289:      //trash card
        4: 1290:      discardCard(handPos, currentPlayer, state, 1);		
        4: 1291:      return 0;
        -: 1292:		
        -: 1293:    case outpost:
        -: 1294:      //set outpost flag
        4: 1295:      state->outpostPlayed++;
        -: 1296:			
        -: 1297:      //discard card
        4: 1298:      discardCard(handPos, currentPlayer, state, 0);
        4: 1299:      return 0;
        -: 1300:		
        -: 1301:    case salvager:
        -: 1302:      //+1 buy
    #####: 1303:      state->numBuys++;
        -: 1304:			
    #####: 1305:      if (choice1)
        -: 1306:	{
        -: 1307:	  //gain coins equal to trashed card
    #####: 1308:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1309:	  //trash card
    #####: 1310:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1311:	}
        -: 1312:			
        -: 1313:      //discard card
    #####: 1314:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1315:      return 0;
        -: 1316:		
        -: 1317:    case sea_hag:
    #####: 1318:      for (i = 0; i < state->numPlayers; i++){
    #####: 1319:	if (i != currentPlayer){
    #####: 1320:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1321:	  state->discardCount[i]++;
    #####: 1322:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1323:	}
        -: 1324:      }
    #####: 1325:      return 0;
        -: 1326:		
        -: 1327:    case treasure_map:
        -: 1328:      //search hand for another treasure_map
    #####: 1329:      index = -1;
    #####: 1330:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1331:	{
    #####: 1332:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1333:	    {
    #####: 1334:	      index = i;
    #####: 1335:	      break;
        -: 1336:	    }
        -: 1337:	}
    #####: 1338:      if (index > -1)
        -: 1339:	{
        -: 1340:	  //trash both treasure cards
    #####: 1341:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1342:	  discardCard(index, currentPlayer, state, 1);
        -: 1343:
        -: 1344:	  //gain 4 Gold cards
    #####: 1345:	  for (i = 0; i < 4; i++)
        -: 1346:	    {
    #####: 1347:	      gainCard(gold, state, 1, currentPlayer);
        -: 1348:	    }
        -: 1349:				
        -: 1350:	  //return success
    #####: 1351:	  return 1;
        -: 1352:	}
        -: 1353:			
        -: 1354:      //no second treasure_map found in hand
    #####: 1355:      return -1;
        -: 1356:    }
        -: 1357:	
     8823: 1358:  return -1;
        -: 1359:}
        -: 1360:
     8831: 1361:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1362:{
        -: 1363:	
        -: 1364:  //if card is not trashed, added to Played pile 
     8831: 1365:  if (trashFlag < 1)
        -: 1366:    {
        -: 1367:      //add card to played pile
     8827: 1368:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8827: 1369:      state->playedCardCount++;
        -: 1370:    }
        -: 1371:	
        -: 1372:  //set played card to -1
     8831: 1373:  state->hand[currentPlayer][handPos] = -1;
        -: 1374:	
        -: 1375:  //remove card from player's hand
     8831: 1376:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1377:    {
        -: 1378:      //reduce number of cards in hand
        1: 1379:      state->handCount[currentPlayer]--;
        -: 1380:    }
     8830: 1381:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1382:    {
        -: 1383:      //reduce number of cards in hand
    #####: 1384:      state->handCount[currentPlayer]--;
        -: 1385:    }
        -: 1386:  else 	
        -: 1387:    {
        -: 1388:      //replace discarded card with last card in hand
     8830: 1389:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1390:      //set last card to -1
     8830: 1391:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1392:      //reduce number of cards in hand
     8830: 1393:      state->handCount[currentPlayer]--;
        -: 1394:    }
        -: 1395:	
     8831: 1396:  return 0;
        -: 1397:}
        -: 1398:
        8: 1399:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1400:{
        -: 1401:  //Note: supplyPos is enum of choosen card
        -: 1402:	
        -: 1403:  //check if supply pile is empty (0) or card is not used in game (-1)
        8: 1404:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1405:    {
    #####: 1406:      return -1;
        -: 1407:    }
        -: 1408:	
        -: 1409:  //added card for [whoseTurn] current player:
        -: 1410:  // toFlag = 0 : add to discard
        -: 1411:  // toFlag = 1 : add to deck
        -: 1412:  // toFlag = 2 : add to hand
        -: 1413:
        8: 1414:  if (toFlag == 1)
        -: 1415:    {
        4: 1416:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1417:      state->deckCount[player]++;
        -: 1418:    }
        4: 1419:  else if (toFlag == 2)
        -: 1420:    {
        4: 1421:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1422:      state->handCount[player]++;
        -: 1423:    }
        -: 1424:  else
        -: 1425:    {
    #####: 1426:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1427:      state->discardCount[player]++;
        -: 1428:    }
        -: 1429:	
        -: 1430:  //decrease number in supply pile
        8: 1431:  state->supplyCount[supplyPos]--;
        -: 1432:	 
        8: 1433:  return 0;
        -: 1434:}
        -: 1435:
    41755: 1436:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1437:{
        -: 1438:  int i;
        -: 1439:	
        -: 1440:  //reset coin count
    41755: 1441:  state->coins = 0;
        -: 1442:
        -: 1443:  //add coins for each Treasure card in player's hand
  4456981: 1444:  for (i = 0; i < state->handCount[player]; i++)
        -: 1445:    {
  4415226: 1446:      if (state->hand[player][i] == copper)
        -: 1447:	{
  2471239: 1448:	  state->coins += 1;
        -: 1449:	}
  1943987: 1450:      else if (state->hand[player][i] == silver)
        -: 1451:	{
    #####: 1452:	  state->coins += 2;
        -: 1453:	}
  1943987: 1454:      else if (state->hand[player][i] == gold)
        -: 1455:	{
    #####: 1456:	  state->coins += 3;
        -: 1457:	}	
        -: 1458:    }	
        -: 1459:
        -: 1460:  //add bonus
    41755: 1461:  state->coins += bonus;
        -: 1462:
    41755: 1463:  return 0;
        -: 1464:}
        -: 1465:
        -: 1466:
        -: 1467://end of dominion.c
        -: 1468:
