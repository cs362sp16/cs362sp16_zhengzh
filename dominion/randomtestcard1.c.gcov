        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "rngs.h"
        -:    4:#include "dominion.h"
        -:    5:#include <math.h>
        -:    6:
        2:    7:int main(int argc, char *argv[]){
        -:    8:
        -:    9:  	
        -:   10:  struct gameState g;
        -:   11:
        2:   12:  int k[10] = {embargo,adventurer,gardens,smithy,cutpurse,mine,ambassador,
        -:   13:	       outpost,baron,tribute};
        -:   14:
        -:   15:
        -:   16:  int numPlayer;
        -:   17:  int i;
        2:   18:  int seed= atoi(argv[1]);
        2:   19:  srand(seed);
        -:   20:
     2002:   21:  for(i=0; i<1000; i++){
        -:   22: 
     2000:   23:  	numPlayer = rand() %4;
     2000:   24:        int randnum= rand();
        -:   25:  	
     2000:   26:	initializeGame(numPlayer, k, randnum, &g);
        -:   27:
        -:   28:	
     2000:   29:	printf("Begin Test ");
     2000:   30:	printf("%d", i);
     2000:   31:	printf(": \n");
        -:   32:
     2000:   33:	g.deckCount[0]=rand() % MAX_DECK;
     2000:   34:	g.discardCount[0]=rand() % MAX_DECK;
     2000:   35:	g.handCount[0]=rand() % MAX_HAND;
        -:   36:
     2000:   37:	int deckcount = g.deckCount[0];
     2000:   38:	int discardcount = g.discardCount[0];
     2000:   39:	int handcount = g.handCount[0];
        -:   40:
     2000:   41:	g.hand[0][0] = smithy;
        -:   42:
     2000:   43:	int returnval = playCard(0,0,0,0,&g);
        -:   44:
        -:   45:
     2000:   46:	if(g.handCount[0] != handcount+3){
        -:   47:
     2000:   48:		printf("Failed to draw 3 cards, test fails\n");
        -:   49:
        -:   50:	}
        -:   51:
        -:   52:  }
        2:   53:	return 0;
        -:   54:}
